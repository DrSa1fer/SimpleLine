{
  "api/SimpleLineLibrary.Configuration.html": {
    "href": "api/SimpleLineLibrary.Configuration.html",
    "title": "Class Configuration | SimpleLine",
    "keywords": "Class Configuration Namespace SimpleLineLibrary Assembly SimpleLine.dll public class Configuration Inheritance object Configuration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Configuration() Make empty configuration public Configuration() Properties ConvertibleTypes Convertible Types public IReadOnlyDictionary<Type, Func<string, object?>> ConvertibleTypes { get; } Property Value IReadOnlyDictionary<Type, Func<string, object>> DefinedTypes public IEnumerable<TypeInfo> DefinedTypes { get; init; } Property Value IEnumerable<TypeInfo> HelpKeys Keys which are considered keys to call help public IReadOnlySet<string> HelpKeys { get; init; } Property Value IReadOnlySet<string> InjectibleTypes public IReadOnlyDictionary<Type, Func<object?>> InjectibleTypes { get; } Property Value IReadOnlyDictionary<Type, Func<object>> OnAfterRun Action after run the library public Action? OnAfterRun { get; set; } Property Value Action OnBeforeRun Action before run the library public Action? OnBeforeRun { get; set; } Property Value Action OnCommandNotFound Action when the command is not found public Action<string>? OnCommandNotFound { get; set; } Property Value Action<string> OnHandlerMissing public Action<string>? OnHandlerMissing { get; set; } Property Value Action<string> OnNoArguments Action when no arguments were passed public Action? OnNoArguments { get; set; } Property Value Action OnSimpleLineException Action when an error occurs inside the library public Action<Exception>? OnSimpleLineException { get; set; } Property Value Action<Exception> OnUserException Action when an error occurs inside the user code public Action<Exception>? OnUserException { get; set; } Property Value Action<Exception> ProgramDescription Progrram description public string ProgramDescription { get; init; } Property Value string ProgramName Program name public string ProgramName { get; init; } Property Value string ProgramVersion Program version public string ProgramVersion { get; init; } Property Value string Methods AddTypeForConverting<T>(Func<string, T>) Add type for converting public void AddTypeForConverting<T>(Func<string, T> func) Parameters func Func<string, T> Convertation method Type Parameters T Type for converting AddTypeForInject<T>(Func<T>) Add type for inject public void AddTypeForInject<T>(Func<T> func) Parameters func Func<T> Getting instance method Type Parameters T Type for inject Default(Assembly) Make configuration with default values public static Configuration Default(Assembly assembly) Parameters assembly Assembly Target assembly Returns Configuration Configuration"
  },
  "api/SimpleLineLibrary.Setup.CommandAttribute.html": {
    "href": "api/SimpleLineLibrary.Setup.CommandAttribute.html",
    "title": "Class CommandAttribute | SimpleLine",
    "keywords": "Class CommandAttribute Namespace SimpleLineLibrary.Setup Assembly SimpleLine.dll Marks a method as a command so that the library can use this [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class CommandAttribute : Attribute Inheritance object Attribute CommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandAttribute(string) public CommandAttribute(string command) Parameters command string"
  },
  "api/SimpleLineLibrary.Setup.CommandDefinitionsAttribute.html": {
    "href": "api/SimpleLineLibrary.Setup.CommandDefinitionsAttribute.html",
    "title": "Class CommandDefinitionsAttribute | SimpleLine",
    "keywords": "Class CommandDefinitionsAttribute Namespace SimpleLineLibrary.Setup Assembly SimpleLine.dll Marks a class as a command definition holder so that the library can use this [AttributeUsage(AttributeTargets.Class)] public class CommandDefinitionsAttribute : Attribute Inheritance object Attribute CommandDefinitionsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandDefinitionsAttribute() public CommandDefinitionsAttribute() CommandDefinitionsAttribute(string) public CommandDefinitionsAttribute(string rootCommand) Parameters rootCommand string"
  },
  "api/SimpleLineLibrary.Setup.CustomKeysAttribute.html": {
    "href": "api/SimpleLineLibrary.Setup.CustomKeysAttribute.html",
    "title": "Class CustomKeysAttribute | SimpleLine",
    "keywords": "Class CustomKeysAttribute Namespace SimpleLineLibrary.Setup Assembly SimpleLine.dll Sets the keys for the handler parameter [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)] public class CustomKeysAttribute : Attribute Inheritance object Attribute CustomKeysAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomKeysAttribute(string, string) public CustomKeysAttribute(string shortKey, string longKey) Parameters shortKey string short key \"-k\" longKey string full key \"--key\""
  },
  "api/SimpleLineLibrary.Setup.DescriptionAttribute.html": {
    "href": "api/SimpleLineLibrary.Setup.DescriptionAttribute.html",
    "title": "Class DescriptionAttribute | SimpleLine",
    "keywords": "Class DescriptionAttribute Namespace SimpleLineLibrary.Setup Assembly SimpleLine.dll Adds a description for further use by the library [AttributeUsage(AttributeTargets.Method|AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class DescriptionAttribute : Attribute Inheritance object Attribute DescriptionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DescriptionAttribute(string) public DescriptionAttribute(string description) Parameters description string"
  },
  "api/SimpleLineLibrary.Setup.html": {
    "href": "api/SimpleLineLibrary.Setup.html",
    "title": "Namespace SimpleLineLibrary.Setup | SimpleLine",
    "keywords": "Namespace SimpleLineLibrary.Setup Classes CommandAttribute Marks a method as a command so that the library can use this CommandDefinitionsAttribute Marks a class as a command definition holder so that the library can use this CustomKeysAttribute Sets the keys for the handler parameter DescriptionAttribute Adds a description for further use by the library"
  },
  "api/SimpleLineLibrary.SimpleLine.html": {
    "href": "api/SimpleLineLibrary.SimpleLine.html",
    "title": "Class SimpleLine | SimpleLine",
    "keywords": "Class SimpleLine Namespace SimpleLineLibrary Assembly SimpleLine.dll public class SimpleLine Inheritance object SimpleLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Build(Configuration) Build SimpleLine public static SimpleLine Build(Configuration configuration) Parameters configuration Configuration SimpleLine configuration Returns SimpleLine Run(IEnumerable<string>) Launch Point public object? Run(IEnumerable<string> args) Parameters args IEnumerable<string> Input tokens Returns object"
  },
  "api/SimpleLineLibrary.html": {
    "href": "api/SimpleLineLibrary.html",
    "title": "Namespace SimpleLineLibrary | SimpleLine",
    "keywords": "Namespace SimpleLineLibrary Classes Configuration SimpleLine"
  },
  "articles/en/essentials/commands.html": {
    "href": "articles/en/essentials/commands.html",
    "title": "Commands | SimpleLine",
    "keywords": "Commands 1. Dependencies Namespaces All the attributes required to register commands are in the namespace SimpleLineLibrary.Setup. Types [CommandDefinitions] - is used to define groups of commands. [Command] - is needed to define the command. [Description] - is needed to add a description to a command or parameter. [CustomKeys] - is needed to set your own parameter keys. 2. Naming The command name can contains Letters, Numbers, \"-\", but must start with Letters. Examples: make t123 new-file 3. Definition Preparation We need to prepare the class and implement the methods in it. For example, let's create a MyCommand class and implement the Say method in it. It looks like this: public class MyCommand { public void Say(string msg) { Console.WriteLine($\"I say: {msg}\"); } } Warning Classes and methods must have public access modifiers - public, otherwise they will simply be inaccessible to SimpleLine Add attributes In the class that we have defined, we will add a few new lines. - Add namespace It contains a definition of the attributes we need. using SimpleLineLibrary.Setup; - Marking the class with the [CommandDefinitions] attribute This is necessary so that the system knows in the future that there may be command definitions in this class. [CommandDefinitions] public class MyCommand { ... } - Marking the method with the [Command] attribute This is necessary so that the system can use the method as a command and give a name by which it will be accessible. [Command(\"say\")] public void Say(string msg) { ... } 4. Additionally Marking the method with the [Description] attribute This is necessary so that the system receives a description of the command and displays it if necessary. If the attribute is not applied, the description will be empty. [Command(\"say\")] [Description(\"Command print your message\")] public void Say(string msg) { ... } Marking the parameter of method with the [Description] attribute This is necessary so that the system receives a description of the command and displays it if necessary. If the attribute is not applied, the description will be empty. [Command(\"say\")] [Description(\"Command print your message\")] public void Say([Description(\"Your message\")] string msg) { ... } Marking the parameter of method with the [CustomKeys(\"-m\", \"--msg\")] attribute This is necessary in order to specify your own parameter keys that will be used during the retrieval of values. In case the attribute is not applied, keys will be created automatically. [Command(\"say\")] [Description(\"Command print your message\")] public void Say([Description(\"Your message\")] [CustomKeys(\"-m\", \"--msg\")] string msg) { ... } 5. Nested commands Commands can be nested within another command, for example, let's take math, we want to add a nested command to it to get math sum. To do this, we need to pass the names of the commands separated by a space: [Command(\"math sum\")] public void Sum(int x, int y) { ... } Or use the grouping. More details in the next paragraph 6. Grouping To understand why this is necessary, we should consider an example. Let's take the example of the math command and the sum nested command: public class MathCommands { public void Math() { Console.WriteLine(\"Math is cool!\"); } public void Sum(int x, int y) { Console.WriteLine($\"Result: {x + y}\"); } } The first option for solving the problem, most likely, that you would use: using SimpleLineLibrary.Setup; [CommandDefinitions] public class MathCommands { [Command(\"math\")] public void Math() { ... } [Command(\"math sum\")] public void Sum(int x, int y) { ... } } In that case, everything is correct, but it can be simplified. Let's apply grouping. To do this, there is an overload in the [CommandDefinitions] attribute that takes the name of the command to be attached to. Here's the same code. works exactly the same as in the previous example, but this time using grouping: using SimpleLineLibrary.Setup; [CommandDefinitions(\"math\")] public class MathCommands { [Command(\"@\")] public void Math() { ... } [Command(\"sum\")] public void Sum(int x, int y) { ... } } This becomes more relevant when the depth of nesting grows The @ symbol is a contextual function of the library that allows you to define the command to which the group is bound, in this case math."
  },
  "articles/ru/essentials/def-commands.html": {
    "href": "articles/ru/essentials/def-commands.html",
    "title": "Объявление команды | SimpleLine",
    "keywords": "Объявление команды Подготовка Нам следует подготовить класс и реализовать в нем методы. Для примера, создадим класс MyCommand и реализуем в нем метод Say. Это выглядит так: public class MyCommand { public void Say(string msg) { Console.WriteLine($\"I say: {msg}\"); } } Warning Классы и методы должен быть с публичным модификаторами доступа - public, иначе они будут попросту недоступны для SimpleLine Добавление атрибутов В классе, который мы определили, добавим несколько новых строчек. > Добавляем пространство имен В нем содержится определение нужных нам атрибутов. using SimpleLineLibrary.Setup; > Помечаем класс атрибутом [CommandDefinitions] Это нужно для того, чтобы в дальнейшем система знала, что в этом классе могут быть определения команд. [CommandDefinitions] public class MyCommand { ... } > Помечаем метод атрибутом [Command] Это нужно для того, чтобы система могла использовать метод как команду и даем имя, по которому она будет доступна. [Command(\"say\")] public void Say(string msg) { ... } Дополнительно Помечаем метод атрибутом [Description] Это нужно для того, чтобы система получила описание команды и вывести его при необходимости. В случае, если атрибут не применен, описание будет пустым. [Command(\"say\")] [Description(\"Command print your message\")] public void Say(string msg) { ... } Помечаем параметр метода атрибутом [Description] Это нужно для того, чтобы система получила описание параметра команды и вывести его при необходимости. В случае, если атрибут не применен, описание будет пустым. [Command(\"say\")] [Description(\"Command print your message\")] public void Say([Description(\"Your message\")] string msg) { ... } Помечаем параметр метода атрибутом [CustomKeys] Это нужно для того, чтобы указывать свои ключей параметров, которые будут использоваться во время получения значений. В случае, если атрибут не применен, ключи будут созданы автоматически. [Command(\"say\")] [Description(\"Command print your message\")] public void Say([Description(\"Your message\")] [CustomKeys(\"-m\", \"--msg\")] string msg) { ... } Если имя параметра включает в себя символ \"_\", то в ключе он будет заменен на \"-\""
  },
  "articles/ru/essentials/grouping.html": {
    "href": "articles/ru/essentials/grouping.html",
    "title": "Группировка | SimpleLine",
    "keywords": "Группировка Для понимания зачем это нужно нам стоит рассмотреть пример. Возьмем команду math и вложенную команду sum: public class MathCommands { public void Math() { Console.WriteLine(\"Math is cool!\"); } public void Sum(int x, int y) { Console.WriteLine($\"Result: {x + y}\"); } } Первый вариант решения задачи, вероятнее всего, который вы бы использовали: using SimpleLineLibrary.Setup; [CommandDefinitions] public class MathCommands { [Command(\"math\")] public void Math() { ... } [Command(\"math sum\")] public void Sum(int x, int y) { ... } } В том варианте все верно, но можно упростить. Давайте применим группировку. Для этого в атрибуте [CommandDefinitions] есть перегрузка, которая принимает имя команды к которой надо прикрепиться. Вот тот же код. работающий точно также, что и в прошлом примере, но на этот раз с использованием группировки: using SimpleLineLibrary.Setup; [CommandDefinitions(\"math\")] public class MathCommands { [Command(\"@\")] public void Math() { ... } [Command(\"sum\")] public void Sum(int x, int y) { ... } } Это становить более актуальнее, когда глубина вложенности растет Символ @ - это контекстная функция библиотеки, позволяющая дать определение команде, к которой привязана группа, в данном случае math."
  },
  "articles/ru/essentials/naming.html": {
    "href": "articles/ru/essentials/naming.html",
    "title": "Именование | SimpleLine",
    "keywords": "Именование Имя команды Имя команды может содержать Буквы, Цифры, символ \"-\", но должно начинаться с Буквы. Примеры: make t123 new-file Ключ параметра Ключ параметра, также как и имя команды, может содержать Буквы, Цифры, символ \"-\", но должен начинаться с символа \"-\", а после него должна идти Буква. Есть 2 вида ключей короткий и длинный, разница у них лишь в том, что длинный начинается с двух симвлов \"-\", а короткий с одного Примеры длинного ключа: --path --ser-ve --message1 Короткого ключ: -p -s -m-1"
  },
  "articles/ru/essentials/nessed-commands.html": {
    "href": "articles/ru/essentials/nessed-commands.html",
    "title": "Вложенные команды | SimpleLine",
    "keywords": "Вложенные команды Команды могут быть вложенными в другую команду для примера возьмем math, мы хотим добавить в нее вложенную команду, чтобы получить math sum. Для этого нам понадобится при объявлении команды передать имена команд через пробел: [Command(\"math sum\")] public void Sum(int x, int y) { ... }"
  },
  "articles/ru/essentials/preparation.html": {
    "href": "articles/ru/essentials/preparation.html",
    "title": "Подготовка | SimpleLine",
    "keywords": "Подготовка Пространства имен Все необходимые для запуска и настройки библиотеки находится в пространстве имен SimpleLineLibrary, поэтому импортируем его там, где будет вызываться библиотека using SimpleLineLibrary; Все необходимые для регистрации команд атрибуты находится в пространстве имен SimpleLineLibrary.Setup, поэтому импортируем его там, где будет регистрировать команды using SimpleLineLibrary.Setup; Типы [CommandDefinitions] - нужен для определения групп команд. [Command] - нужен для определения команды. [Description] - нужен для добавления описания к команде или параметру. [CustomKeys] - нужен для установки своих собственных ключей параметров."
  },
  "index.html": {
    "href": "index.html",
    "title": "SimpleLine | SimpleLine",
    "keywords": "SimpleLine About SimpleLine an open source library that targets to simplify command line interaction. Allows you to define new commands without having to think about getting values, type conversion, calling a specific type, and a lot of other troubles. It s written in C# language. Why? SimpleLine library makes it easy to write command-line applications Facilitates development Fairly easy to use Easy enough to embed Does not affect the testability of the system Feedback or Suggestion Github Telegram Discord License GNU GPL-3.0"
  }
}